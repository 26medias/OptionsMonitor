var _ 				= require('underscore');
var nodecrypto 		= require('crypto');

var cachr	= function(options) {
	var scope		 = this;
	
	this.options	= _.extend({
		TTL:	30
	}, options);
	
	this.cache	=	{};
	
	if (this.options.TTL) {
		this.itv	= setInterval(function() {
			var d	= (new Date()).getTime();
			var i;
			for (i in scope.cache) {
				if (scope.cache[i].expires && scope.cache[i].expires <= d) {
					delete scope.cache[i];
				}
			}
		}, 1000);
	}
}
cachr.prototype.generateId = function(query) {
	var md5sum = nodecrypto.createHash('md5');
	if (typeof query == 'object') {
		md5sum.update(JSON.stringify(query));
	} else {
		md5sum.update(query);
	}
	return md5sum.digest('hex');
}
cachr.prototype.exists = function(query) {
	var id	= this.generateId(query);
	return this.cache.hasOwnProperty(id);
}
cachr.prototype.clear = function(query) {
	var id	= this.generateId(query);
	delete this.cache[id];
	return this;
}
cachr.prototype.get = function(query) {
	var id	= this.generateId(query);
	if (this.cache.hasOwnProperty(id)) {
		return this.cache[id].data;
	}
	return null;
}
cachr.prototype.set = function(query, data, TTL) {
	var id	= this.generateId(query);
	this.cache[id]	= {
		data:		data,
		expires:	 (new Date()).getTime()+(TTL?TTL:this.options.TTL)
	};
	return true;
}

module.exports = cachr;
