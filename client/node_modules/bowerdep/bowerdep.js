var _ 			= require('underscore');
var path 		= require('path');
var fstool 		= require('fs-tool');
var pstack 		= require('pstack');
var toposort 	= require('toposort-class');

var bowerdep = function(options) {
	this.options	= _.extend({
		root:	''
	}, options);
	
	this.libs	= {};
	this.depmap	= [];
	this.files	= {};
	
};
bowerdep.prototype.map = function(callback) {
	var scope = this;
	
	var stack = new pstack({
		async:		true,
		progress:	'Listing the bower dependencies...'
	});
	
	fstool.directory.list(this.options.root, function(directories) {
		_.each(directories, function(directory) {
			stack.add(function(done) {
				fstool.file.readJson(path.normalize(scope.options.root+'/'+directory+'/bower.json'), function(object) {
					if (!object) {
						done();
						return false;
					}
					
					scope.files[object.name]	= [];
					
					// Save the lib data
					scope.libs[object.name]	= _.extend({
						pathname:	path.normalize(scope.options.root+'/'+directory+'/')
					}, object);
					
					// Add to the map
					scope.depmap.push({
						name:		object.name,
						depends:	_.keys(object.dependencies)
					});
					
					// List the files
					//console.log("object['cdn-upload']",object['cdn-upload']);
					if (object['cdn-upload'] && _.isArray(object['cdn-upload'])) {
						// Use the files listed in the directories
						var listStack = new pstack();
						_.each(object['cdn-upload'], function(dir) {
							listStack.add(function(completed) {
								//console.log("\n>>>path.normalize(scope.options.root+'/'+directory+'/'+dir)",path.normalize(scope.options.root+'/'+directory+'/'+dir));
								fstool.file.listAll(path.normalize(scope.options.root+'/'+directory+'/'+dir), false, function(files) {
									//console.log(">>>>>>>> files", files);
									_.each(files, function(filename) {
										scope.files[object.name].push(filename);
									});
									completed();
								});
							});
						});
						listStack.start(done);
					} else {
						// Only use the files in 'main'
						if (_.isArray(object.main)) {
							_.each(object.main, function(filename) {
								scope.files[object.name].push(path.normalize(scope.options.root+'/'+directory+'/'+filename));
							});
						} else {
							scope.files[object.name].push(path.normalize(scope.options.root+'/'+directory+'/'+object.main));
						}
						
						done();
					}
					
				});
			});
		});
		
		stack.start(function() {
			//console.log("\nscope.files",scope.files);
			callback();
		});
	});
	return true;
};
bowerdep.prototype.publishableFiles = function() {
	return this.files;
};
bowerdep.prototype.getLibList = function(name, buffer, noReturn) {
	var scope = this;
	if (!buffer) {
		var buffer = {};
	}
	_.each(scope.depmap, function(item) {
		if (item.name == name && !buffer.hasOwnProperty(name)) {
			buffer[name] = item;
			// Load the dependencies
			_.each(item.depends, function(dep) {
				scope.getLibList(dep, buffer, true);
			});
		}
	});
	
	return buffer;
	/*
	if (!noReturn) {
		// Convert into a format compatible with topological sorting
		
		var t = new toposort();
		
		_.each(buffer, function(lib) {
			t.add(lib.name, lib.depends);
		});
		
		var libOrder	= t.sort().reverse();
		
		var files	= [];
		
		_.each(libOrder, function(lib) {
			files	= files.concat(scope.getLibFiles(lib));
		});
		
		return files;
	}*/
}
bowerdep.prototype.getFiles = function(libs, all) {
	var scope = this;
	
	// Get the libs to load
	var buffer	= {};
	_.each(libs, function(lib) {
		scope.getLibList(lib, buffer);
	});
	
	
	// Topological sort
	var t = new toposort();
		
	_.each(buffer, function(lib) {
		t.add(lib.name, lib.depends);
	});
	
	var libOrder	= t.sort().reverse();
	
	var files	= [];
	
	_.each(libOrder, function(lib) {
		//console.log("getFiles lib",lib);
		if (all) {
			files	= files.concat(scope.files[lib]);
		} else {
			files	= files.concat(scope.getLibFiles(lib));
		}
	});
	
	
	//console.log("getFiles libs",files);
	
	
	return files;
}
bowerdep.prototype.getLibFiles = function(name, callback) {
	var scope = this;
	
	if (!this.libs.hasOwnProperty(name)) {
		console.log("Missing library:", name);
		return false;
	}
	
	var output	= [];
	
	// this.libs[name] contains the JSON data from bower.json
	
	//console.log("this.libs[name].main",this.libs[name].main);
	
	if (_.isArray(this.libs[name].main)) {
		_.each(this.libs[name].main, function(filename) {
			output.push(path.normalize(scope.libs[name].pathname+'/'+filename));
		});
	} else {
		output.push(path.normalize(this.libs[name].pathname+'/'+this.libs[name].main));
	}
	
	return output;
};

module.exports = bowerdep;
