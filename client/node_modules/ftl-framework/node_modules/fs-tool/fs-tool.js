
var _ 			= require('underscore');
var path 		= require('path');
var fs 			= require('fs');
var request 	= require('request');
var walk    	= require('walk');

var file = {
	directory:	{
		list:	function(from, callback) {
			fs.readdir(from, function(err, files) {
				var output 	= [];
				_.each(files, function(file) {
					if(fs.statSync(path.normalize(from+'/'+file)).isDirectory()) {
						output.push(file);
					}
				});
				callback(output);
			});
			
		}
	},
	file:	{
		list:	function(from, callback) {
			fs.readdir(from, function(err, files) {
				var output 	= [];
				_.each(files, function(file) {
					if(!fs.statSync(path.normalize(from+'/'+file)).isDirectory()) {
						output.push(file);
					}
				});
				callback(output);
			});
			
		},
		listAll:	function(dir, ext, callback) {
			var options = {
				followLinks: 	false
			};
			
			var files   = [];
			
			// Walker options
			var walker  = walk.walk(dir, options);
			
			if (_.isArray(ext)) {
				walker.on('file', function(root, stat, next) {
					var extname = path.extname(stat.name);
					if (_.contains(ext, extname)) {
						files.push(path.normalize(root + '/' + stat.name));
					}
					next();
				});
			} else {
				walker.on('file', function(root, stat, next) {
					var extname = path.extname(stat.name);
					if (extname == ext || !ext) {
						files.push(path.normalize(root + '/' + stat.name));
					}
					next();
				});
			}
			
			
			walker.on('end', function() {
				callback(files);
			});
		},
		exists:	function(file, callback) {
			fs.exists(file, function(exists) {
				callback(exists);
			});
		},
		read:	function(filename, callback) {
			if (filename.substr(0,4) == "http") {
				request.get(filename, function (error, response, body) {
					if (!error && response.statusCode == 200) {
						callback(body);
					} else {
						callback(false);
					}
				});
			} else {
				fs.readFile(filename, 'utf8', function (err, data) {
					if (err) {
						callback(false);
					} else {
						callback(data);
					}
				});
			}
		},
		readJson:	function(filename, callback) {
			if (filename.substr(0,4) == "http") {
				request.get(filename, function (error, response, body) {
					if (!error && response.statusCode == 200) {
						callback(JSON.parse(body));
					} else {
						callback(null);
					}
				});
			} else {
				fs.readFile(filename, 'utf8', function (err, data) {
					if (err) {
						callback(null);
					} else {
						callback(JSON.parse(data));
					}
				});
			}
		},
		write:	function(filename, content, callback) {
			fs.writeFile(filename, content, callback);
		},
		writeJson:	function(filename, content, callback) {
			fs.writeFile(filename, JSON.stringify(content), callback);
		},
		remove:	function(filename, callback) {
			fs.unlink(filename, callback);
		}
	}
};

module.exports = file;
